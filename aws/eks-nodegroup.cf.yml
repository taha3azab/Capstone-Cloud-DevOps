Description: >
  Capstone project for Cloud DevOps Engineering Nanodegree
  Author - Taha Azab
  Creating the infrastructure for EKS cluster deployment.

Parameters:
  EnvironmentName:
    Description: An Environment name that will be prefixed to resources
    Type: String

  ImageID:
    Description: An image ID for EC2 Instance
    Type: String

  KeyPairName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName

  DesiredCapacity:
    Description: Desired capacity of Node Group ASG.
    Type: Number

  MinSize:
    Description: Minimum number of web application servers
    Type: String

  MaxSize:
    Description: Maximum number of web application servers
    Type: String
  
  BootstrapArguments:
    Type: String
    Default: ""
    Description: "Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami"
  
  NodeVolumeSize:
    Type: Number
    Default: 20
    Description: Node volume size

Resources:
  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Path: /

  NodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref NodeInstanceRole

  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all nodes in the cluster.
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      Tags:
        - Key: !Sub
            - "kubernetes.io/cluster/${ClusterName}"
            - ClusterName: 
                Fn::ImportValue: !Sub "${EnvironmentName}-Cluster"
          Value: "owned"

  NodeSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow node to communicate with each other
      FromPort: 0
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      ToPort: 65535

  ClusterControlPlaneSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      FromPort: 443
      GroupId: 
        Fn::ImportValue: !Sub "${EnvironmentName}-SCG"
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      ToPort: 443

  ControlPlaneEgressToNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with worker Kubelet and pods
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      FromPort: 1025
      GroupId: 
        Fn::ImportValue: !Sub "${EnvironmentName}-SCG"
      IpProtocol: tcp
      ToPort: 65535

  ControlPlaneEgressToNodeSecurityGroupOn443:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      FromPort: 443
      GroupId: 
        Fn::ImportValue: !Sub "${EnvironmentName}-SCG"
      IpProtocol: tcp
      ToPort: 443

  NodeSecurityGroupFromControlPlaneIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      FromPort: 1025
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: 
        Fn::ImportValue: !Sub "${EnvironmentName}-SCG"
      ToPort: 65535

  NodeSecurityGroupFromControlPlaneOn443Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
      FromPort: 443
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: 
        Fn::ImportValue: !Sub "${EnvironmentName}-SCG"
      ToPort: 443

  NodeLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              DeleteOnTermination: true
              VolumeSize: !Ref NodeVolumeSize
              VolumeType: gp2
        IamInstanceProfile:
          Arn: !GetAtt NodeInstanceProfile.Arn
        ImageId: !Ref ImageID
        InstanceType: t3.micro
        KeyName: !Ref KeyPairName
        SecurityGroupIds:
        - Ref: NodeSecurityGroup
        UserData: 
          Fn::Base64: !Sub
            - |
              #!/bin/bash
              set -o xtrace
              /etc/eks/bootstrap.sh ${ClusterName} ${BootstrapArguments}
              /opt/aws/bin/cfn-signal --exit-code $? \
                      --stack  ${AWS::StackName} \
                      --resource NodeGroup  \
                      --region ${AWS::Region}
            - ClusterName:
                Fn::ImportValue: !Sub "${EnvironmentName}-Cluster"
        MetadataOptions:
          "HttpPutResponseHopLimit" : 2

  NodeGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: !Ref DesiredCapacity
      LaunchTemplate:
        LaunchTemplateId: !Ref NodeLaunchTemplate
        Version: !GetAtt NodeLaunchTemplate.LatestVersionNumber
      MaxSize: !Ref MaxSize
      MinSize: !Ref MinSize
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: !Sub 
            - ${ClusterName}-CapstoneNodesGroup-Node
            - ClusterName:
                Fn::ImportValue: !Sub "${EnvironmentName}-Cluster"
        - Key: !Sub 
            - kubernetes.io/cluster/${ClusterName}
            - ClusterName:
                Fn::ImportValue: !Sub "${EnvironmentName}-Cluster"
          PropagateAtLaunch: true
          Value: owned
      VPCZoneIdentifier: 
        Fn::Split:
          - ","
          - Fn::ImportValue: !Sub ${EnvironmentName}-SUBNETS
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: !Ref DesiredCapacity
        PauseTime: PT5M


  # NodesAutoScalingGroup:
  #   Type: AWS::AutoScaling::AutoScalingGroup
  #   Properties:
  #     DesiredCapacity: !Sub ${DesiredInstances}
  #     LaunchConfigurationName: !Ref LaunchConfiguration
  #     MinSize: !Ref MinSize
  #     MaxSize: !Ref MaxSize
  #     VPCZoneIdentifier:
  #       Fn::Split:
  #         - ","
  #         - Fn::ImportValue: !Sub ${EnvironmentName}-SUBNETS
  #     Tags:
  #       - Key: Name
  #         Value: !Sub
  #           - "${EksId}-CapstoneNodesGroup-Node"
  #           - EksId:
  #               Fn::ImportValue: !Sub "${EnvironmentName}-Cluster"
  #         PropagateAtLaunch: "true"
  #       - Key: !Sub
  #           - "kubernetes.io/cluster/${EksId}"
  #           - EksId:
  #               Fn::ImportValue: !Sub "${EnvironmentName}-Cluster"
  #         Value: "owned"
  #         PropagateAtLaunch: "true"
  #   UpdatePolicy:
  #     AutoScalingRollingUpdate:
  #       MaxBatchSize: "1"
  #       MinInstancesInService: 3
  #       PauseTime: "PT5M"

  # LaunchConfiguration:
  #   Type: AWS::AutoScaling::LaunchConfiguration
  #   Properties:
  #     AssociatePublicIpAddress: "true"
  #     IamInstanceProfile: !Ref NodeInstanceProfile
  #     ImageId: !Ref ImageID
  #     InstanceType: t2.micro
  #     KeyName: !Ref KeyPairName
  #     SecurityGroups:
  #       - !Ref NodeSecurityGroup
  #     BlockDeviceMappings:
  #       - DeviceName: /dev/xvda
  #         Ebs:
  #           VolumeSize: 10
  #           VolumeType: gp2
  #           DeleteOnTermination: true
  #     UserData:
  #       Fn::Base64: !Sub
  #         - |
  #           #!/bin/bash
  #           set -o xtrace
  #           /etc/eks/bootstrap.sh ${EksId}
  #           /opt/aws/bin/cfn-signal --exit-code $? \
  #                    --stack  ${AWS::StackName} \
  #                    --resource NodesAutoScalingGroup  \
  #                    --region ${AWS::Region}
  #         - EksId:
  #             Fn::ImportValue: !Sub "${EnvironmentName}-Cluster"

Outputs:
  NodeInstanceRole:
    Description: The node instance role
    Value: !GetAtt NodeInstanceRole.Arn
    Export:
      Name: !Sub ${EnvironmentName}-IR

  NodeSecurityGroup:
    Description: The security group for the node group
    Value: !Ref NodeSecurityGroup
    Export:
      Name: !Sub ${EnvironmentName}-NSG
  
  NodeAutoScalingGroup:
    Description: The autoscaling group
    Value: !Ref NodeGroup
